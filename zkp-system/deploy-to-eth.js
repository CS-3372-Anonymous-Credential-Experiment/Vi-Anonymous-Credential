const { ethers } = require("hardhat");
const fs = require("fs");

async function main() {
    console.log("üöÄ Deploying ZKP contracts to private ETH network...\n");

    // Get deployer account (using pre-funded account from API.md)
    const [deployer] = await ethers.getSigners();
    console.log("üìã Deploying with account:", deployer.address);
    console.log("üí∞ Using pre-funded account (10,000 ETH as per API.md)\n");

    try {
        // 1. Deploy Verifier (generated by hardhat-circom)
        console.log("1Ô∏è‚É£ Deploying Verifier (from hardhat-circom)...");
        const Verifier = await ethers.getContractFactory("Verifier");
        const verifier = await Verifier.deploy();
        await verifier.waitForDeployment();
        const verifierAddress = await verifier.getAddress();
        console.log("‚úÖ Verifier deployed to:", verifierAddress);

        // 2. Deploy ZKPVerifier (our main verifier)
        console.log("\n2Ô∏è‚É£ Deploying ZKPVerifier...");
        const ZKPVerifier = await ethers.getContractFactory("ZKPVerifier");
        const zkpVerifier = await ZKPVerifier.deploy();
        await zkpVerifier.waitForDeployment();
        const zkpVerifierAddress = await zkpVerifier.getAddress();
        console.log("‚úÖ ZKPVerifier deployed to:", zkpVerifierAddress);

        // 3. Deploy IELTSCredentialVerifier
        console.log("\n3Ô∏è‚É£ Deploying IELTSCredentialVerifier...");
        const IELTSCredentialVerifier = await ethers.getContractFactory("IELTSCredentialVerifier");
        const ieltsVerifier = await IELTSCredentialVerifier.deploy();
        await ieltsVerifier.waitForDeployment();
        const ieltsVerifierAddress = await ieltsVerifier.getAddress();
        console.log("‚úÖ IELTSCredentialVerifier deployed to:", ieltsVerifierAddress);

        // 4. Deploy ZKPPrivacyContract
        console.log("\n4Ô∏è‚É£ Deploying ZKPPrivacyContract...");
        const ZKPPrivacyContract = await ethers.getContractFactory("ZKPPrivacyContract");
        const zkpPrivacy = await ZKPPrivacyContract.deploy();
        await zkpPrivacy.waitForDeployment();
        const zkpPrivacyAddress = await zkpPrivacy.getAddress();
        console.log("‚úÖ ZKPPrivacyContract deployed to:", zkpPrivacyAddress);

        // 5. Save deployment info
        const deploymentInfo = {
            network: "localhost",
            chainId: 15555,
            deployer: deployer.address,
            deploymentTime: new Date().toISOString(),
            contracts: {
                zkpPrivacy: zkpPrivacyAddress,
                zkpVerifier: zkpVerifierAddress,
                ieltsVerifier: ieltsVerifierAddress,
                Verifier: {
                    address: verifierAddress,
                    description: "Hardhat-circom generated verifier for simple IELTS circuit"
                },
                ZKPVerifier: {
                    address: zkpVerifierAddress,
                    description: "Main ZK-SNARK verifier contract"
                },
                IELTSCredentialVerifier: {
                    address: ieltsVerifierAddress,
                    description: "IELTS credential verification contract"
                },
                ZKPPrivacyContract: {
                    address: zkpPrivacyAddress,
                    description: "Main privacy contract for ZKP operations"
                }
            },
            zkSnark: {
                circuitCompiled: true,
                hardhatCircom: true,
                realProofs: true
            }
        };

        fs.writeFileSync('deployment-info.json', JSON.stringify(deploymentInfo, null, 2));
        console.log("\nüìÑ Deployment info saved to deployment-info.json");

        // 6. Test contract interaction
        console.log("\nüß™ Testing contract interactions...");
        
        // Test pause/unpause functionality
        console.log("‚è∏Ô∏è  Testing pause functionality...");
        await zkpPrivacy.pause();
        const isPaused = await zkpPrivacy.paused();
        console.log("‚úÖ Contract paused:", isPaused);
        
        await zkpPrivacy.unpause();
        const isUnpaused = !(await zkpPrivacy.paused());
        console.log("‚úÖ Contract unpaused:", isUnpaused);

        console.log("\nüéâ All contracts deployed successfully!");
        console.log("üîó Contracts are now ready for ZKP operations on your private ETH network");
        
        return deploymentInfo;

    } catch (error) {
        console.error("‚ùå Deployment failed:", error.message);
        throw error;
    }
}

// Execute deployment
if (require.main === module) {
    main()
        .then((info) => {
            console.log("\n‚úÖ Deployment completed successfully");
            process.exit(0);
        })
        .catch((error) => {
            console.error("‚ùå Deployment failed:", error);
            process.exit(1);
        });
}

module.exports = { main };
